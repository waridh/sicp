#+title: Stream Combinator
* Overview
Literate programming for the stream combinators
* Source
:properties:
:header-args:racket: :tangle ./src/modules/stream-combinator.rkt :comments yes
:end:
#+begin_src racket
#lang sicp
(#%require "stream-base.rkt")
(#%provide add-streams mul-streams combine-streams scale-stream partial-sums interleave)
#+end_src
** Generic Combinator
#+begin_src racket :exports code
(define (combine-streams proc stream-1 stream-2)
  (cons-stream (proc (stream-car stream-1) (stream-car stream-2))
               (combine-streams proc (stream-cdr stream-1) (stream-cdr stream-2))))
#+end_src
** Scale stream
#+begin_src racket :exports code
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor))
              stream))
#+end_src
** Add stream
#+begin_src racket :exports code
(define (add-streams stream-1 stream-2)
  (combine-streams + stream-1 stream-2))
#+end_src
** Multiply streams

#+begin_src racket :exports code
(define (mul-streams stream-1 stream-2)
  (combine-streams * stream-1 stream-2))
#+end_src
** Partial Sums

#+begin_src racket :exports code
(define (partial-sums s)
  (define result
    (cons-stream (stream-car s)
                 (add-streams result (stream-cdr s))))
  result)
#+end_src
** Iterleave
This procedure will take in two streams, and interleave them.

#+begin_src racket :exports code
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream
       (stream-car s1)
       (interleave s2 (stream-cdr s1)))))
#+end_src
