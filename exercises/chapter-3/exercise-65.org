#+title: Exercise 65
* Prompt

Use the series

$$
\ln 2 = 1 - \frac{1}{2} + \frac{1}{3} - \frac{1}{4} + \dots
$$

to compute three sequences of approximations to the natural logarithm of 2, in the same way we did above for \pi. How rapidly do these sequences converge?
* Solution
:properties:
:header-args:racket: :tangle ./src/exercise-65.rkt :comments yes
:end:

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/stream-iterator.rkt"
           "modules/stream-combinator.rkt"
           "modules/assert-tool.rkt")
#+end_src

So the question that is being posed here is really how well can we draft up a test that would convey the difference in number of iterations.

** Implementation

#+begin_src racket :exports code
(define (ln2-summands n)
  (cons-stream (/ 1.0 n)
              (stream-map - (ln2-summands (+ n 1)))))

;; the base speed of convergence
(define ln2-stream
  (partial-sums (ln2-summands 1)))

;; Euler transform just once
(define ln2-stream2
  (euler-transform ln2-stream))

;; Tableau of euler transform
(define ln2-stream3
  (accelerated-sequence euler-transform ln2-stream))
#+end_src

** Testing

For testing strategy, we are just going to print out the first eight terms of each of the sequence. Luckily, we have the procedure to do that already written.

#+begin_src racket :exports code
(display-stream-range 0 7 ln2-stream)
(newline)
(display-stream-range 0 7 ln2-stream2)
(newline)
(display-stream-range 0 7 ln2-stream3)
#+end_src

** Result
#+begin_src bash :exports both :results output
racket ./src/exercise-65.rkt
#+end_src

#+RESULTS:
: ( 1.0 0.5 0.8333333333333333 0.5833333333333333 0.7833333333333332 0.6166666666666666 0.7595238095238095 0.6345238095238095)
: ( 0.7 0.6904761904761905 0.6944444444444444 0.6924242424242424 0.6935897435897436 0.6928571428571428 0.6933473389355742 0.6930033416875522)
: ( 1.0 0.7 0.6932773109243697 0.6931488693329254 0.6931471960735491 0.6931471806635636 0.6931471805604039 0.6931471805599445)

Yes, we can see that the speed of convergence is very much the same as those of the ~pi-stream~.
