#+title: Exercise 18
* Prompt
Write a procedure that examines a list and determines whether it contains a cycle, that is, whether a program that tried to find the end of the list by taking successive ~cdrs~ would go into an infinite loop. [[file:exercise-13.org][exercise 3.13]] constructed such lists.

* Solution
:PROPERTIES:
:header-args:racket: :tangle ./src/exercise-18.rkt :mkdirp yes :comments both
:END:

#+begin_src racket :exports none
#lang sicp
#+end_src

We will include the procedure from exercise 3.13 here:

#+begin_src racket :exports code
(define (last-pair x)
  (if (null? (cdr x)) x (last-pair (cdr x))))
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
#+end_src

We will build our procedure that checks for a cycle to follow the spec, which is to check that we are working with a scheme list, which is singly linked, where the ~car~ points to the content of the cell, and the ~cdr~ is the pointer to the next element of the list, and that the final element of the list will have its ~cdr~ pointing to a ~nil~. I state this because I will be solving this exercise for this specific data structure.

The content of the ~car~ is irrelevant, as we don't guarantee that those values are unique. Instead, we will work with the instance of the pairs themselves.

Now we have to think about the strategy to detect a cycle. We could use the same strategy as the previous exercise where we keep track of the pairs that we have seen, and if we see that value again, we say that this is a cycle. Now of course the problem with this implementation is that the space complexity of this algorithm grows linearly. We could try to improve this, but that is the next exercise, so maybe we don't do that yet.

Once again, we will need a containment check procedure.

#+begin_src racket :exports code
(define (contains? value items)
  (cond [(null? items) false]
        [(eq? (car items) value) true]
        [else (contains? value (cdr items))]))
#+end_src

Now, like in [[file:exercise-17.org][exercise 3.17]], we are going to use a mutation architecture to keep track of the seen values. This time, the conditional logic is more simple, as we are trying to see if we can reach the sentinel value, or if we hit a cycle.

#+begin_src racket :exports code
(define (cycle? x)
  (let ([seen '()])
    (define (add-seen! value)
      (set! seen (cons value seen)))
    (define (cycle?-aux y)
      (cond
        [(null? y) false]
        [(contains? y seen) true]
        [else
         (begin
           (add-seen! y)
           (cycle?-aux (cdr y)))]))
    (cycle?-aux x)))
#+end_src

Now we will have a look at some simple tests.

#+begin_src racket :exports code
(define basic-list (list 'a 'b 'c))
(define basic-cycle (make-cycle (list 'a 'b 'c)))
(define cycle-2 (cons 'x (cons 'y (cons 'z basic-cycle))))

(define (printout-cases name test-value)
  (display "testing against name: ")
  (display name)
  (newline)
  (display "which has the following shape: ")
  (display test-value)
  (newline)
  (display "is a cycle?: ")
  (display (cycle? test-value))
  (newline)
  (newline))

(printout-cases "basic-list" basic-list)
(printout-cases "basic-cycle" basic-cycle)
(printout-cases "cycle-2" cycle-2)
#+end_src


Running our result, we get the following answers.

#+begin_src bash :exports both :results drawer replace
racket ./src/exercise-18.rkt
#+end_src

#+RESULTS:
:results:
testing against name: basic-list
which has the following shape: (a b c)
is a cycle?: #f

testing against name: basic-cycle
which has the following shape: #0=(a b c . #0#)
is a cycle?: #t

testing against name: cycle-2
which has the following shape: (x y z . #0=(a b c . #0#))
is a cycle?: #t

:end:

These results are accurate, but the testing is not exhaustive. Functionally, this looks correct, but the issue is that our implementation is linear. Imagine having to build another list with 1,000,000 elements when trying to see if a list of 1,000,000 elements contains a cycle.
