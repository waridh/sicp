#+title: Exercise 49
* Prompt
Give a scenario where the deadlock-avoidance mechanism described above does not work. (Hint: In the exchange problem, each process knows in advance which accounts it will need to get access to. Consider a situation where a process must get access to some shared resources before it can know which additional shared resources it will require.)
* Solution
Consider the case where we need to implement user defined scheduled payments. The processes can only access the list of target accounts after locking the account. The specific sequence that will cause a deadlock again here will be described as follows. Let there be two accounts, ~a1~ and ~a2~. ~a1~ has a scheduled payment to ~a2~ at the same time as ~a2~ has a payment scheduled for ~a1~. Let the architecture not be aware of this, and stores only the source of the payment in the transfer in the scheduling (There must be some scenarios where this is necessary). Let ~p1~ be the process that will service ~a1~ sending to ~a2~, and let ~p2~ be the process the will service sending ~a2~ to ~a1~. When the scheduled time arrives, the deadlock condition is when ~p1~ obtains ~a1~ at the same time that ~p2~ grabs ~a2~. Now, if the only deadlock avoidance feature we have is to attempt to grab the lock based on some priority, we will still enter a deadlock, since we already had to grab a lock to find out what the next lock to grab is.
