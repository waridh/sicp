#+title: Exercise 61
* Prompt
Let $S$ be a power series whose constant term is 1. Suppose we want to find the power series $1/S$, that is, the series $X$ such that $SX=1$. Write $S=1+S_R$ where $S_R$ is the part of $S$ after the constant term. Then we can solve for $X$ as follows:

$$
\begin{align}
  S \cdot X &= 1,\\
  \left( 1 + S_R \right) \cdot X &= 1,\\
  X + S_R \cdot X &= 1,\\
  X &= 1 - S_R \cdot X
\end{align}
$$

In other words, $X$ is the power series whose constant term is 1 an whose higher-order terms are given by the negative of $S_{R}$ times $X$. fuse this idea to write a procedure ~invert-unit-series~ that computes $1/S$ for a power series $S$ with constant term 1. You will need to use ~mul-series~ from the previous exercise.
* Solution
:properties:
:header-args:racket: :tangle ./src/exercise-61.rkt :comments yes
:end:

Like with the previous, for improved modularity, we have moved the implementation of the ~invert-unit-series~ to over [[file:stream-series.org][here]].

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/stream-combinator.rkt"
           "modules/stream-series.rkt"
           "modules/assert-tool.rkt")
#+end_src
** Test
For testing strategy, we are going to invert a series, and then multiply it with its uninverted counter-part to see if we get the value of 1.

#+begin_src racket :exports code
(assert-list-infinite-stream (list 1 0 0 0 0 0 0 0)
                             (mul-series (invert-unit-series cosine-series) cosine-series))
#+end_src
** Result
For the result, we shall evaluate the racket script to see if our test passes.

#+begin_src bash :exports both :results output
racket ./src/exercise-61.rkt
#+end_src

#+RESULTS:
:
: pass: (1 0 0 0 0 0 0 0) == ( 1 0 0 0 0 0 0 0)

Nice, looks like we were able to implement the procedure to produces the inverted stream.
