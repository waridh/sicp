#+title: Exercise 23
* Prompt
A /deque/ ("double-ended queue") is a sequence in which items can be inserted and deleted at either the front or the rear. Operations on deques are the constructor ~make-deque~, the predicate ~empty-deque?~, selectors ~front-deque~ and ~rear-deque~, mutators ~front-insert-deque!~, ~rear-insert-deque!~, ~front-delete-deque!~, and ~rear-delete-deque!~. Show how to represent deques using pairs, and give implementations of the operations. All operations should be accomplished in \Theta(1) steps.

* Solution
:PROPERTIES:
:header-args:racket: :tangle ./src/exercise-23.rkt
:END:

#+begin_src racket :exports none
#lang sicp
#+end_src

We'll be implementing using pairs, and immediately, the problem we are going to run into is the singly linked list representation, which is the default list representation in Lisp. If our rear pointer is pointing to the actual last pair in the list that represents the queue, we would not be able to delete the rear in \Theta(1) time, since we would have to traverse from the front pointer to find the last pair again.

Well, I think that I have read about different ways to implement a double ended queue using just singly linked list. Since now, both ends have to be able to pop, maybe we should have both ends point to the middle. Every time that one end is empty, we internally reorganize half from the other end. Now there is reorganization overhead, but for most of the case, we should be able to do queue operations in \Theta(1) steps.

Now we need to have a procedure that will shuffle half of one side of the queue to the other side.

#+begin_src plantuml :exports results :results file :file ./images/3.23-dequeue-idea.png
@startuml
rectangle "front-side" as front_side {
        rectangle "pair" as pair1
        rectangle "pair" as pair2
        rectangle "pair" as pair3
        rectangle "nil" as nil1
}
rectangle "rear-side" as rear_side {
        rectangle "pair" as pair4
        rectangle "pair" as pair5
        rectangle "pair" as pair6
        rectangle "pair" as pair7
        rectangle "nil" as nil2
}
rectangle "pair" as pair8
note top of pair8 : deque representation

label a
label b
label c
label d
label e
label f
label g

nil1 -[hidden]right- nil2
front_side -[hidden]right- rear_side
pair1 -right-> pair2: cdr
pair2 -right-> pair3: cdr
pair3 -right-> nil1: cdr
pair4 -left-> nil2: cdr
pair5 -left-> pair4: cdr
pair6 -left-> pair5: cdr
pair7 -left-> pair6: cdr

pair1 -down-> a: car
pair2 -down-> b: car
pair3 -down-> c: car
pair4 -down-> d: car
pair5 -down-> e: car
pair6 -down-> f: car
pair7 -down-> g: car

pair8 -down-> pair1: car
pair8 -down-> pair7: cdr

@enduml
#+end_src

#+RESULTS:
[[file:./images/3.23-dequeue-idea.png]]

Every time that we run out of a singly linked list, we will find the length of the other singly linked list, and using this value, use iteration to build a reversed list up to the halfway point.

#+begin_src racket :exports code
;; This procedure will split the donor in half, and return a pair where the
;; first element is a pointer to the donor, and the second element of the pair
;; is the pointer to the reversed tail list.
(define (split-reverse! donor)
  (define (reverse-list acc tail)
    (if (null? tail)
        acc
        (reverse-list (cons (car tail) acc) (cdr tail))))
  ;; This procedure will return the pair in the middle. If input is null, then
  ;; return null, if only one element return that element, if two element,
  ;; return first element.
  (define (middle-pair items)
    (define (iter target acc tail)
      (cond
        [(null? tail) (error "hit null" (list items tail acc))]
        [(>= acc target) tail]
        [else (iter target (+ acc 1) (cdr tail))]))
    (if (null? items)
        items
        (let ([middle-target (floor (/ (- (length items) 1) 2))]) (iter middle-target 0 items))))
  ;; This procedure changes the cdr of the pair to nil.
  (define (seal-pair! pair)
    (if (null? pair)
        (error "sealing nil" pair)
        (set-cdr! pair '())))
  (let ([target-middle (middle-pair donor)])
    (let ([rest-reversed (reverse-list '() (cdr target-middle))])
      (seal-pair! target-middle)
      (cons donor rest-reversed))))

(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (make-deque)
  (cons '() '()))

(define (empty-deque? deque)
  (and (null? (car deque)) (null? (cdr deque))))

;; General head selector procedure. Returns a pair where the first element is
;; the front that is being searched for, and the second element is the result
;; from split-reverse if that procedure application was required.
(define (search-head primary-ptr secondary-ptr)
  (cond
    [(not (null? primary-ptr)) (cons (car primary-ptr) '())]
    [(null? secondary-ptr) (error "GETTER called on empty DEQUE:" (cons primary-ptr secondary-ptr))]
    [else
     (let ([rebalanced (split-reverse! secondary-ptr)])
       (if (null? (cdr rebalanced))
           (cons (car secondary-ptr) '())
           (cons (car (cdr rebalanced)) rebalanced)))]))

(define (front-deque deque)
  (let ([search-res (search-head (front-ptr deque) (rear-ptr deque))])
    (if (null? (cdr search-res))
        (car search-res)
        (let ([new-front-ptr (cdr (cdr search-res))]
              [new-rear-ptr (car (cdr search-res))])
          (begin
            (set-front-ptr! deque new-front-ptr)
            (set-rear-ptr! deque new-rear-ptr)
            (car search-res))))))

(define (rear-deque deque)
  (let ([search-res (search-head (rear-ptr deque) (front-ptr deque))])
    (if (null? (cdr search-res))
        (car search-res)
        (let ([new-front-ptr (car (cdr search-res))]
              [new-rear-ptr (cdr (cdr search-res))])
          (begin
            (set-front-ptr! deque new-front-ptr)
            (set-rear-ptr! deque new-rear-ptr)
            (car search-res))))))

(define (front-insert-deque! deque item)
  (set-front-ptr! deque (cons item (front-ptr deque)))
  deque)
(define (rear-insert-deque! deque item)
  (set-rear-ptr! deque (cons item (rear-ptr deque)))
  deque)

(define (front-delete-deque! deque)
  (let ([curr-front-ptr (front-ptr deque)])
    (cond
      [(not (null? curr-front-ptr))
       (begin
         (set-front-ptr! deque (cdr curr-front-ptr))
         deque)]
      [(null? (rear-ptr deque)) (error "DELETE on empty DEQUE" deque)]
      [else
       (let ([rebalanced (split-reverse! (rear-ptr deque))])
         (let ([new-rear (car rebalanced)]
               [new-front (cdr rebalanced)])
           (display "new-rear and new-front: ") (display (list new-rear new-front)) (newline)
           (if (null? new-front)
               (begin
                 (set-rear-ptr! deque '())
                 deque)
               (begin
                 (set-front-ptr! deque (cdr new-front))
                 (set-rear-ptr! deque new-rear)
                 deque))))])))
(define (rear-delete-deque! deque)
  (let ([curr-rear-ptr (rear-ptr deque)])
    (cond
      [(not (null? curr-rear-ptr))
       (begin
         (set-rear-ptr! deque (cdr curr-rear-ptr))
         deque)]
      [(null? (front-ptr deque)) (error "DELETE on empty DEQUE" deque)]
      [else
       (let ([rebalanced (split-reverse! (front-ptr deque))])
         (let ([new-rear (cdr rebalanced)]
               [new-front (car rebalanced)])
           (if (null? new-rear)
               (begin
                 (set-front-ptr! deque '())
                 deque)
               (begin
                 (set-front-ptr! deque new-front)
                 (set-rear-ptr! deque (cdr new-rear))
                 deque))))])))
#+end_src

Now, testing this against the testcase from the previous exercise, we see the same values, and therefore we were successful in implementing the closure representation of the queue.

#+begin_src racket :exports code
(define deque1 (make-deque))
(empty-deque? deque1)
(front-insert-deque! deque1 'd)
(front-insert-deque! deque1 'c)
(front-insert-deque! deque1 'b)
(front-insert-deque! deque1 'a)
(define deque2 (make-deque))
(rear-insert-deque! deque2 'd)
(rear-insert-deque! deque2 'c)
(rear-insert-deque! deque2 'b)
(rear-insert-deque! deque2 'a)

(define (assert-eq msg left right)
  (display (if (eq? left right) "pass: " "fail: "))
  (display msg)
  (newline))

(assert-eq "front of (a b c d)" (front-deque deque1) 'a)
(assert-eq "front of (d c b a)" (front-deque deque2) 'd)
(assert-eq "rear of (a b c d)" (rear-deque deque1) 'd)
(assert-eq "rear of (d c b a)" (rear-deque deque2) 'a)

(front-delete-deque! deque1)
(assert-eq "front of (b c d)" (front-deque deque1) 'b)
(front-delete-deque! deque1)
(assert-eq "front of (c d)" (front-deque deque1) 'c)
(front-delete-deque! deque1)
(assert-eq "front of (d)" (front-deque deque1) 'd)
(front-delete-deque! deque1)
(assert-eq "should be empty deque after this line" (empty-deque? deque1) true)

(assert-eq "Testing (nil (a))"
           (empty-deque? (front-delete-deque! (rear-insert-deque! (make-deque) 'a)))
           true)

(rear-delete-deque! deque2)
(assert-eq "rear of (d c b)" (rear-deque deque2) 'b)
(rear-delete-deque! deque2)
(assert-eq "rear of (d c)" (rear-deque deque2) 'c)
(rear-delete-deque! deque2)
(assert-eq "rear of (d)" (rear-deque deque2) 'd)
(rear-delete-deque! deque2)
(assert-eq "should be empty deque after this line" (empty-deque? deque2) true)
#+end_src


#+begin_src bash :exports both :results output replace
racket ./src/exercise-23.rkt
#+end_src

#+RESULTS:
#+begin_example
#t
((d))
((c d))
((b c d))
((a b c d))
(() d)
(() c d)
(() b c d)
(() a b c d)
pass: front of (a b c d)
pass: front of (d c b a)
pass: rear of (a b c d)
pass: rear of (d c b a)
((b) d c)
pass: front of (b c d)
(() d c)
pass: front of (c d)
(() d)
pass: front of (d)
new-rear and new-front: ((d) ())
(())
pass: should be empty deque after this line
new-rear and new-front: ((a) ())
pass: Testing (nil (a))
((d c) b)
pass: rear of (d c b)
((d c))
pass: rear of (d c)
((d))
pass: rear of (d)
(())
pass: should be empty deque after this line
#+end_example

With this test result, we are relatively confident that we have written our ~deque~ library to properly support it's specification. The usage of two linked list should ensure that for most of the usecase, our operations are \Theta(1) time, with the exception of reblancing, which would cost \Theta(n) steps.

