#+title: Exercise 27
* Prompt
/Memoization/ (also called /tabulation/) is a technique that enables a procedure to record, in a local table, values that have previously been computed. This technique can make a vast difference in the performance of a program. A memoized procedure maintains a table in which values of previous calls are stored using as keys the arguments that produced the values. When the memoized procedure is asked to compute a value, it first checks the table to see if the value is already there and, if so, just returns that value. Otherwise, it computes the new value in the ordinary way and stores this in the table. As an example of memoization, recall from Section 1.2.2 the exponential process for computing Fibonacci numbers:

#+begin_src racket :exports code
(define (fib n)
  (cond [(= n 0) 0]
        [(= n 1) 1]
        [else (+ (fib (- n 1)) (fib (- n 2)))]))
#+end_src

The memoized version of the same procedure is

#+begin_src racket :exports code
(define memo-fib
  (memoize
   (lambda (n)
     (cond [(= n 0) 0]
           [(= n 1) 1]
           [else (+ (memo-fib (- n 1))
                    (memo-fib (- n 2)))]))))
#+end_src

Where the memoizer is defined as

#+begin_src racket :exports code
(define (memoize f)
  (let ([table (make-table)])
    (lambda (x)
      (let ([previously-computed-result (lookup x table)])
        (or previously-computed-result
            (let ([result (f x)])
              (insert! x result table)
              result))))))
#+end_src

Draw an environment diagram to analyze the computation of ~(memo-fib 3)~. Explain why ~memo-fib~ computes the $n^{th}$ Fibonacci number in a number of steps proportional to $n$. Would the same scheme still work if we had simply defined ~memo-fib~ to be (memoize fib)?

* Solution

We could say that the way that ~memo-fib~ is defined is strange. We definitely want to be careful while analyzing this procedure.


** Evaluation environment

Here, we will analyze the application of ~(memo-fib 3)~.

We are going to start with creating the diagram for the environment after the ~memo-fib~ procedure has been defined. There are some useful observations that we could make from this. Due to how the ~memo-fib~ procedure was defined, the memoization table has a local scope, and ~memo-fib~ is pointing to the procedure that points to the environment frame with the table.

#+begin_src plantuml :exports results :results file :file ./images/3.27-base-env.png
@startuml
card global_env {
        label memoize
        label "memo-fib" as memo_fib
}
rectangle "pair" as pair1
rectangle "pair" as pair2
rectangle "pair" as pair3

card memoize_proc [
parameters: f
body: (let ([table (make-table)])
(lambda (x)
(let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))))
]

card fib_lambda [
parameters: n
body: (cond ((= n 0) 0)
            ((= n 1) 1)
            (else (+ (memo-fib (- n 1))
                     (memo-fib (- n 2)))))
]

card memo_fib_proc [
parameters: x
body: (let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))
]

card e1_env {
        label "f" as f1
        label "table" as table1
}

card "table content" as table_content {
        label nil
}

global_env <-right- e1_env

global_env <-down- pair1
global_env <-down- pair2
e1_env <-down- pair3

memoize -down-> pair1
f1 -down-> pair2
memo_fib -down-> pair3

pair1 -down-> memoize_proc
pair2 -down-> fib_lambda
pair3 -down-> memo_fib_proc

table1 -up-> table_content
@enduml
#+end_src

#+RESULTS:
[[file:./images/3.27-base-env.png]]

Now, we will start evaluating ~(memo-fib 3)~.

#+begin_src plantuml :exports results :results file :file ./images/3.27-memo-fib-1.png
@startuml
card global_env {
        label memoize
        label "memo-fib" as memo_fib
}
rectangle "pair" as pair1
rectangle "pair" as pair2
rectangle "pair" as pair3
label 3
label "3" as 3_2
label "2" as 2_1
label "2" as 2_2

card memoize_proc [
parameters: f
body: (let ([table (make-table)])
(lambda (x)
(let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))))
]

card fib_lambda [
parameters: n
body: (cond ((= n 0) 0)
((= n 1) 1)
(else (+ (memo-fib (- n 1))
(memo-fib (- n 2)))))
]

card memo_fib_proc [
parameters: x
body: (let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))
]

card e1_env {
        label "f" as f1
        label "table" as table1
}

card e2_env {
        label "x" as x2
}

note top of e2_env : (memo-fib 3)

card e3_env {
        label "n" as n3
}

note top of e3_env : (f 3)

card e4_env {
        label "x" as x4
}

note top of e4_env : (memo-fib 2)

card e5_env {
        label "n" as n5
}

note top of e5_env : (f 2)

card "table content" as table_content {
        label nil
}

global_env <-right- e1_env
global_env <-down- e3_env
global_env <-down- e5_env

global_env <-down- pair1
global_env <-down- pair2
e1_env <-down- pair3
e1_env <-right- e2_env
e1_env <-down- e4_env

memoize -down-> pair1
f1 -down-> pair2
memo_fib -down-> pair3

pair1 -down-> memoize_proc
pair2 -down-> fib_lambda
pair3 -down-> memo_fib_proc

table1 -up-> table_content

x2 -down-> 3
n3 -down-> 3_2
x4 -down-> 2_1
n5 -down-> 2_2

global_env -[#red]right-> e2_env
e2_env -[#red]-> e3_env
e3_env -[#red]-> e4_env
e4_env -[#red]-> e5_env
@enduml
#+end_src

#+RESULTS:
[[file:./images/3.27-memo-fib-1.png]]

Above, we are showing the initial recursive cases from the first argument of the ~+~ in the top level application of ~f~ in environment ~e1~. Due to not reaching the base case, memoization has not yet started. At ~e5~, we are nearly at the base case, in which ~memo-fib~ will return values for the first time.

#+begin_src plantuml :exports results :results file :file ./images/3.27-memo-fib-2.png
@startuml
card global_env {
        label memoize
        label "memo-fib" as memo_fib
}
rectangle "pair" as pair1
rectangle "pair" as pair2
rectangle "pair" as pair3
label 3
label "3" as 3_2
label "2" as 2_1
label "2" as 2_2
label "1" as 1_1
label "1" as 1_2
label "0" as 0_1
label "0" as 0_2

card memoize_proc [
parameters: f
body: (let ([table (make-table)])
(lambda (x)
(let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))))
]

card fib_lambda [
parameters: n
body: (cond ((= n 0) 0)
((= n 1) 1)
(else (+ (memo-fib (- n 1))
(memo-fib (- n 2)))))
]

card memo_fib_proc [
parameters: x
body: (let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))
]

card e1_env {
        label "f" as f1
        label "table" as table1
}

card e2_env {
        label "x" as x2
}

note top of e2_env : (memo-fib 3)

card e3_env {
        label "n" as n3
}

note top of e3_env : (f 3)

card e4_env {
        label "x" as x4
}

note top of e4_env : (memo-fib 2)

card e5_env {
        label "n" as n5
}

note top of e5_env : (f 2)

card table_content [
(1 1) (0 0)
]
card e6_env {
        label "x" as x6
}

note top of e6_env : (memo-fib 1)
card e7_env {
        label "n" as n7
}

note top of e7_env : (f 1)

card e8_env {
        label "x" as x8
}
note top of e8_env : (memo-fib 0)
card e9_env {
        label "n" as n9
}

note top of e9_env : (f 0)



global_env <-right- e1_env
global_env <-down- e3_env
global_env <-down- e5_env

global_env <-down- pair1
global_env <-down- pair2
e1_env <-down- pair3
e1_env <-right- e2_env
e1_env <-down- e4_env

memoize -down-> pair1
f1 -down-> pair2
memo_fib -down-> pair3

pair1 -down-> memoize_proc
pair2 -down-> fib_lambda
pair3 -down-> memo_fib_proc

table1 -up-> table_content

x2 -down-> 3
n3 -down-> 3_2
x4 -down-> 2_1
n5 -down-> 2_2
x6 -down-> 1_1
n7 -down-> 1_2
x8 -down-> 0_1
n9 -down-> 0_2

global_env -[#red]right-> e2_env
e2_env -[#red]-> e3_env
e3_env -[#red]-> e4_env
e4_env -[#red]-> e5_env
e5_env -[#red]-> e6_env
e6_env -[#red]-> e7_env
e7_env -[#blue]-> e6_env : 1
e6_env -[#blue]-> e5_env : 1 and memoized
e5_env -[#red]-> e8_env
e8_env -[#red]-> e9_env
e9_env -[#blue]-> e8_env : 0
e8_env -[#blue]-> e5_env : 0 and memoized
@enduml
#+end_src

#+RESULTS:
[[file:./images/3.27-memo-fib-2.png]]

We now have a pretty complex diagram, and our first two memoization, which comes from the base case of Fibonacci. Now, we are going to continue evaluation.


#+begin_src plantuml :exports results :results file :file ./images/3.27-memo-fib-3.png
@startuml
card global_env {
        label memoize
        label "memo-fib" as memo_fib
}
rectangle "pair" as pair1
rectangle "pair" as pair2
rectangle "pair" as pair3
label 3
label "3" as 3_2
label "2" as 2_1
label "2" as 2_2
label "1" as 1_1

card memoize_proc [
parameters: f
body: (let ([table (make-table)])
(lambda (x)
(let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))))
]

card fib_lambda [
parameters: n
body: (cond ((= n 0) 0)
((= n 1) 1)
(else (+ (memo-fib (- n 1))
(memo-fib (- n 2)))))
]

card memo_fib_proc [
parameters: x
body: (let ([previously-computed-result (lookup x table)])
(or previously-computed-result
(let ([result (f x)])
(insert! x result table)
result)))
]

card e1_env {
        label "f" as f1
        label "table" as table1
}

card e2_env {
        label "x" as x2
}

note top of e2_env : (memo-fib 3)

card e3_env {
        label "n" as n3
}

note top of e3_env : (f 3)

card e4_env {
        label "x" as x4
}

note top of e4_env : (memo-fib 2)

card e5_env {
        label "n" as n5
}

note top of e5_env : (f 2)

card e10_env {
        label "x" as x10
}

note top of e10_env : (memo-fib 1)

card table_content [
(1 1) (0 0) (2 1) (3 2)
]

global_env <-right- e1_env
global_env <-down- e3_env
global_env <-down- e5_env

global_env <-down- pair1
global_env <-down- pair2
e1_env <-down- pair3
e1_env <-right- e2_env
e1_env <-down- e4_env

memoize -down-> pair1
f1 -down-> pair2
memo_fib -down-> pair3

pair1 -down-> memoize_proc
pair2 -down-> fib_lambda
pair3 -down-> memo_fib_proc

table1 -up-> table_content

x2 -right-> 3
n3 -down-> 3_2
x4 -down-> 2_1
n5 -down-> 2_2
x10 -down-> 1_1

global_env -[#red]right-> e2_env
e2_env -[#red]-> e3_env
e3_env -[#red]-> e4_env
e4_env -[#red]-> e5_env
e5_env -[#blue]up-> e4_env : 1
e4_env -[#blue]up-> e3_env : 1 and memoized
e3_env -[#red]-> e10_env
e10_env -[#blue]-> e3_env : 1 memoize hit
e3_env -[#blue]-> e2_env : 2 and memoized
@enduml
#+end_src

#+RESULTS:
[[file:./images/3.27-memo-fib-3.png]]

Following it through, we can see why it is said that the computing the $n^{th}$ Fibonacci number using this procedure is proportional to $n$ steps. This is because on the evaluation of the first argument of the recursive case, all the ~(memo-fib m)~, where ~m~ is all the positive integers less than ~n~, is evaluated and memoized into the table. Other than the ~(memo-fib 0)~ case at ~(memo-fib 2)~, the second argument of the recursive case of ~(memo-fib m)~ will already be memoized, preventing any additional recursive work.


*** (memoize fib)

Finally, to answer the question of if this scheme would work if we defined ~memo-fib~ to ~(memoize fib)~, the simple answer is no. This is because ~fib~ itself, does not point to the memoized version of itself, causing the steps two grow exponentially, instead of linearly, since the second argument of the recursive case would still compute again. It is vital that the memoized procedure is able to access the local scope and memoization table that is created by the ~memoize~ procedure.
