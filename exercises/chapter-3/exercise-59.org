#+title: Exercise 59
* Prompt
In the previous section, we saw how to implement a polynomial arithmetic system representing polynomials as lists of terms. In a similar way, we can work with /power series/, such as

$$
\begin{align}
  e^x &= 1 + x + \frac{x^2}{2} + \frac{x^3}{3 \cdot 2} + \frac{x^4}{4 \cdot 3 \cdot 2} + \dots,\\
  \cos \left( x \right) &= 1 - \frac{x^2}{2} + \frac{x^4}{4 \cdot 3 \cdot 2} - \dots,\\
  \sin \left( x \right) &= x - \frac{x^3}{3 \cdot 2} + \frac{x^5}{5 \cdot 4 \cdot 3 \cdot 2} - \dots
\end{align}
$$

represented as infinite streams. We will represent the series $a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \dots$ as the stream whose elements are the coefficients $a_0, a_1, a_2, a_3, \dots$.

a. The integral of the series $a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \dots$ is the series $$c+a_0x + \frac{1}{2} a_1 x^2 + \frac{1}{3} a_2 x^3 + \frac{1}{4} a_3 x^4 + \dots,$$ where $c$ is any constant. Define a procedure ~integrate-series~ that takes as input a stream $a_0, a_1, a_2, \dots$ representing a power series and returns the stream $a_0, \frac{1}{2}a_1, \frac{1}{3} a_2, \dots$ of coefficients of the non-constant terms of the integral of the series. (Since the result has no constant term, it doesn't represent a power series; when we use ~integrate-series~, we will ~cons~ on the appropriate constant.)

b. The function $x \rightarrow e^x$ is its own derivative. This implies that $e^x$ and the integral of $e^x$ are the same series, except for the constant term, which is $e^0 = 1$. Accordingly, we can generate the series for $e^x$ as
   #+begin_src racket :exports code
(define exp-series
  (cons-stream 1 (integrate-series exp-series)))
   #+end_src
   Show how to generate the series for sine and cosine, starting from the fact that the derivative of sine is cosine and the derivative of cosine is the negative of sine:
   #+begin_src racket :exports code
(define cosine-series (cons-stream 1 <??>))
(define sine-series (cons-stream 0 <??>))
   #+end_src
* Solution
Looks like a tough one.
** Part a
:properties:
:header-args:racket: :tangle ./src/exercise-59-a.rkt :comments yes
:end:

Here, we are just defining a stream transformer.

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/stream-combinator.rkt"
           "modules/stream-generator.rkt"
           "modules/assert-tool.rkt")
#+end_src

#+begin_src racket :exports code
(define (integrate-series s)
  (define (iter acc tail)
    (cons-stream (* (/ 1 (+ acc 1)) (stream-car tail))
                 (iter (+ acc 1) (stream-cdr tail))))
  (iter 0 s))
#+end_src

*** Testing
Of course, as engineers, we have to test our system

#+begin_src racket :exports code
(assert-list-infinite-stream (list 1 (/ 1 2) (/ 1 3) (/ 1 4) (/ 1 5)) (integrate-series ones))
(assert-list-infinite-stream (list 1 1 1 1 1 1 1 1) (integrate-series integers))
#+end_src
*** Execution

#+begin_src bash :exports both :results output
racket ./src/exercise-59-a.rkt
#+end_src

#+RESULTS:
:
: pass: (1 1/2 1/3 1/4 1/5) == ( 1 1/2 1/3 1/4 1/5)
: pass: (1 1 1 1 1 1 1 1) == ( 1 1 1 1 1 1 1 1)
*** Discussion
For now, we are able to a sort of an iterable process that generates the desired stream.

** Part b
:properties:
:header-args:racket: :tangle ./src/exercise-59-b.rkt :comments yes
:end:

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/stream-combinator.rkt"
           "modules/stream-generator.rkt"
           "modules/assert-tool.rkt")
#+end_src

#+begin_src racket :exports none
(define (integrate-series s)
  (define (iter acc tail)
    (cons-stream (* (/ 1 (+ acc 1)) (stream-car tail))
                 (iter (+ acc 1) (stream-cdr tail))))
  (iter 0 s))
#+end_src

Interesting, it looks like we are about to use some mathematical properties with co-operative recursion to create the power series for sine and cosine. I think we could just start.

#+begin_src racket :exports code
(define exp-series
  (cons-stream 1 (integrate-series exp-series)))
#+end_src

#+begin_src racket :exports code
(define cosine-series (cons-stream 1 (stream-map - (integrate-series sine-series))))
(define sine-series (cons-stream 0 (integrate-series cosine-series)))
#+end_src

*** Test

#+begin_src racket :exports code
(assert-list-infinite-stream (list 1 1 (/ 1 2) (/ 1 6) (/ 1 24)) exp-series)
(assert-list-infinite-stream (list 1 0 (/ -1 2) 0 (/ 1 24)) cosine-series)
(assert-list-infinite-stream (list 0 1 0 (/ -1 6) 0 (/ 1 120)) sine-series)
#+end_src

*** Result
#+begin_src bash :exports both :results output
racket ./src/exercise-59-b.rkt
#+end_src

#+RESULTS:
:
: pass: (1 1 1/2 1/6 1/24) == ( 1 1 1/2 1/6 1/24)
: pass: (1 0 -1/2 0 1/24) == ( 1 0 -1/2 0 1/24)
: pass: (0 1 0 -1/6 0 1/120) == ( 0 1 0 -1/6 0 1/120)
