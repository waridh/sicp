#+title: Exercise 2
* Prompt

In software-testing applications, it is useful to be able to count the number of times a given procedure is called during the course of a computation. Write a procedure ~make-monitored~ that takes as input a procedure, ~f~, that itself takes one input. The result returned by ~make-monitored~ is a third procedure, say ~mf~, that keeps track of the number of times it has been called by maintaining an internal counter. If the input to ~mf~ is the special symbol ~how-many-calls?~, then ~mf~ returns the value of the counter. If the input is the special symbol ~reset-count~, then ~mf~ resets the counter to zero. For any other input, ~mf~ returns the result of calling ~f~ on that input and increments the counter. For instance, we could make a monitored version of the ~sqrt~ procedure:

#+begin_src racket :exports code
(define s (make-monitored sqrt))
(s 100)
10
(s 'how-many-calls?)
1
#+end_src
* Solution
Yay, I love higher order functions. We will make three branches, one for showing the count, one fore resetting the count, and one for evaluating the expression. Our reset method will return the call count, and special symbol application will not count towards the call count.

#+begin_src racket :exports code :tangle ./src/exercise-2.rkt :mkdirp yes :comments both
#lang sicp

(define (make-monitored f)
  (let ([call-count 0])
    (lambda (x)
      (cond [(and (symbol? x) (eq? x 'how-many-calls?)) call-count]
            [(and (symbol? x) (eq? x 'reset-count)) (begin (set! call-count 0) call-count)]
            [else (begin (set! call-count (+ call-count 1)) (f x))]))))
#+end_src

#+begin_src racket :exports code :tangle ./src/exercise-2.rkt :mkdirp yes :comments both
(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 'reset-count)
(s 'how-many-calls?)
#+end_src


#+begin_src sh :exports both :results replace output
racket ./src/exercise-2.rkt
#+end_src

#+RESULTS:
: 10
: 1
: 0
: 0

Yep, this is what we expected.
