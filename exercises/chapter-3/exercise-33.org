#+title: Exercise 33
* Prompt

Using the primitive multiplier, adder, and constant constraints, define a procedure ~averager~ that takes three connectors ~a~, ~b~, and ~c~ as inputs and establishes the constraint that the value of ~c~ is the average of the values of ~a~ and ~b~.
* Solution
:PROPERTIES:
:header-args:racket: :tangle ./src/exercise-33.rkt :comments yes
:END:

#+begin_src racket :exports none
#lang sicp
#+end_src

** Provided Primitive Implementation
*** Connectors

#+begin_src racket :exports none
(define (make-connector)
  ;; The internal states
  (let ([value false]
        [informant false]
        [constraints '()])
    ;; Setter for the value being held
    (define (set-my-value newval setter)
      (cond
        [(not (has-value? me))
         (set! value newval)
         (set! informant setter)
         (for-each-except setter inform-about-value constraints)]
        [(not (= value newval)) (error "Contradiction" (list value newval))]
        [else 'ignored]))
    ;; Mutator that clears the current value held
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin
            (set! informant false)
            (for-each-except retractor inform-about-no-value constraints))
          'ignored))
    ;; Adding a new constraint if not already registered
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints (cons new-constraint constraints)))
      ;; This will tell the new constraint about the new value
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    ;; Manually setting up self
    (define (me request)
      (cond
        [(eq? request 'has-value?) (if informant true false)]
        [(eq? request 'value) value]
        [(eq? request 'set-value!) set-my-value]
        [(eq? request 'forget) forget-my-value]
        [(eq? request 'connect) connect]
        [else (error "unknown operation: CONNECTOR" request)]))
    me))
#+end_src

#+begin_src racket :exports code
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond [(null? items) 'done]
          [(eq? (car items) exception) (loop (cdr items))]
          [else (procedure (car items))
                (loop (cdr items))]))
  (loop list))

#+end_src

#+begin_src racket :exports code
(define (has-value? connector)
  (connector 'has-value?))

(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))
#+end_src
*** Constraints

The interface for the constraint system is the following. The classes that implement the constraint interface must accept the following symbols.

- ~'I-have-a-value~
- ~'I-lost-my-value~

With this in mind, the following is the implementation given to us by the book.

#+begin_src racket :exports code
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
#+end_src

Now, we can implement the different constraint primitives.

#+begin_src racket :exports code
(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond
      [(and (has-value? a1) (has-value? a2)) (set-value! sum (+ (get-value a1) (get-value a2)) me)]
      [(and (has-value? a1) (has-value? sum)) (set-value! a2 (- (get-value sum) (get-value a1)) me)]
      [(and (has-value? a2) (has-value? sum)) (set-value! a1 (- (get-value sum) (get-value a2)) me)]))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond
      [(eq? request 'I-have-a-value) (process-new-value)]
      [(eq? request 'I-lost-my-value) (process-forget-value)]
      [else (error "Unknown request: ADDER" request)]))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)
#+end_src

#+begin_src racket :exports code
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond
      [(or (and (has-value? m1) (= (get-value m1) 0)) (and (has-value? m2) (= (get-value m2) 0)))
       (set-value! product 0 me)]
      [(and (has-value? m1) (has-value? m2))
       (set-value! product (* (get-value m1) (get-value m2)) me)]
      [(and (has-value? product) (has-value? m1))
       (set-value! m2 (/ (get-value product) (get-value m1)) me)]
      [(and (has-value? product) (has-value? m2))
       (set-value! m1 (/ (get-value product) (get-value m2)) me)]))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond
      [(eq? request 'I-have-a-value) (process-new-value)]
      [(eq? request 'I-lost-my-value) (process-forget-value)]
      [else (error "Unknown request: MULTIPLIER" request)]))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)
#+end_src

#+begin_src racket :exports code
(define (constant value connector)
  (define (me request)
    (error "unknown request: CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)
#+end_src

We are also going to add the probe connector for better debugging.

#+begin_src racket :exports code
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond [(eq? request 'I-have-a-value) (process-new-value)]
          [(eq? request 'I-lost-my-value) (process-forget-value)]
          [else (error "unknown request: PROBE" request)]))
  (connect connector me)
  me)
#+end_src
** Average Constraint

Here, we are now implementing the average constraint, which will be built entirely out of the primitive constraints. It's not complicated yet, we really just have to satisfy the following expression.

~c = (* (+ a b) 0.5)~

#+begin_src racket :exports code
(define (averager a b c)
  (let ([w (make-connector)]
        [x (make-connector)])
    (adder a b w)
    (constant 0.5 x)
    (multiplier w x c)
    'ok))
#+end_src

** Testing

I think one of the thing that SICP is really lacking is good testing, unlike CS3110, my beloved. Here, I will just make some basic prints.

#+begin_src racket :exports code
(define (test-a)
  (let ([a (make-connector)]
        [b (make-connector)]
        [c (make-connector)])
    (probe "input 1" a)
    (probe "input 2" b)
    (probe "average value" c)
    (averager a b c)
    (constant 90.4 a)
    (constant 33.13 b)))
#+end_src

#+begin_src racket :export code
(define (test-b)
(let ([a (make-connector)]
        [b (make-connector)]
        [c (make-connector)])
    (probe "input 1" a)
    (probe "input 2" b)
    (probe "average value" c)
    (averager a b c)
    (constant 90.4 a)
    (constant 33.13 c)))
#+end_src

#+begin_src racket :export code
(test-a)
(test-b)
#+end_src


Very nice, for this self teaching, this has convinced me that our system is working. We shall now move on.
