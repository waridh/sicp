#+title: Exercise 21
* Prompt
Ben Bitdiddle decides to test the queue implementation described above. He types in the procedures to the Lisp interpreter and proceeds to try them out:

#+begin_src racket :exports code
(define q1 (make-queue))
(insert-queue! q1 'a)
((a) a)
(insert-queue! q1 'b)
((a b) b)
(delete-queue! q1)
((b) b)
(delete-queue! q1)
(() b)
#+end_src

"It's all wrong!" he complains. "The interpreter's response shows that the last item is inserted into the queue twice. And when I delete both items, the second b is still there, so the queue isn't empty, even though it's supposed to be." Eva Lu Ator suggests that Ben has misunderstood what is happening. "It's not that the items are going into the queue twice," she explains. "It's just that the standard Lisp printer doesn't know how to make sense of the queue representation. If you want to see the queue printed correctly, you'll have to define your own print procedure for queues." Explain what Eva Lu is talking about. In particular, show why Ben's examples produce the printed results that they do. Define a procedure ~print-queue~ that takes a queue as input and prints the sequence of items in the queue.

* Solution
:PROPERTIES:
:header-args:racket: :tangle ./src/exercise-21.rkt
:END:

Lisp printer is showing the queue with duplicates because of the internal representation of the queue being a pointer to the front of the queue and the rear of the queue, stored in the pair. The actual queue body is stored as a list, causing the last pair to have its ~cdr~ point to ~nil~. Since the rear pointer is pointing to the last pair in the queue body, it is pointing to a pair with a ~nil~ as its ~cdr~, which would cause the interpreter to recognize the top layer pair as a list, with the front pointer showing the entire body of the relevant queue, and the rear pointer always showing the last element of the queue.

On deletion of the last pair of the queue, the front pointer will correctly show an empty list, but due to the implementation of the queue, the rear pointer will continue to point to the previous last pair. If you access the queue using only the supported selectors, the interface is working correct. The main issue lies in the Lisp interpretation of our data structure. Now, we are going to write a new ~print-queue~ procedure that would correctly show the representation of the queue.

#+begin_src racket :exports none
#lang sicp
(define (front-ptr queue)
  (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))
(define (empty-queue? queue)
  (null? (front-ptr queue)))
(define (make-queue)
  (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ([new-pair (cons item '())])
    (cond [(empty-queue? queue) (set-front-ptr! queue new-pair)
                                (set-rear-ptr! queue new-pair)
                                queue]
          [else (set-cdr! (rear-ptr queue) new-pair)
                (set-rear-ptr! queue new-pair)
                queue])))
(define (delete-queue! queue)
  (cond
    [(empty-queue? queue) (error "DELETE! called with an empty queue" queue)]
    [else
     (set-front-ptr! queue (cdr (front-ptr queue)))
     queue]))
#+end_src

#+begin_src racket :exports code
(define (print-queue queue)
  (display (front-ptr queue))
  (newline))
#+end_src

#+begin_src racket :exports code
(define q1 (make-queue))
(print-queue (insert-queue! q1 'a))
(print-queue (insert-queue! q1 'b))
(print-queue (delete-queue! q1))
(print-queue (delete-queue! q1))
#+end_src

#+begin_src bash :exports results :results drawer
racket ./src/exercise-21.rkt
#+end_src

#+RESULTS:
:results:
(a)
(a b)
(b)
()
:end:

And now, we are correctly displaying the queue.
