#+title: Stream Base
* Overview

This org file contains the basic implementation of the stream interface, as the ~sicp~ language on Racket does not provide the higher level implementations.
* Module base

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
#lang sicp
#+end_src

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(#%provide stream-car
           stream-cdr
           stream-for-each
           display-stream
           stream-ref
           display-line
           stream-enumerate-interval
           stream-filter)
#+end_src
* Stream basic selectors

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(define (stream-car s)
  (car s))

(define (stream-cdr s)
  (force (cdr s)))
#+end_src
* Stream Utilities

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin
        (proc (stream-car s))
        (stream-for-each proc (stream-cdr s)))))
;; procedure that displays all the elements of a stream
(define (display-stream s)
  (display "(")
  (stream-for-each display-ele s)
  (display ")"))
(define (display-line x)
  (newline)
  (display x))
(define (display-ele x)
  (display " ")
  (display x))
#+end_src

#+begin_src racket :exports code :tangle ./src/modules/stream-base.rkt :comments yes
;; procedure that does a 0-index based lookup of the stream
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

;; procedure that filters the stream sequence to only elements that matches the
;; provided predicate.
(define (stream-filter predicate s)
  (cond
    [(stream-null? s) the-empty-stream]
    [(predicate (stream-car s))
     (cons-stream (stream-car s) (stream-filter predicate (stream-cdr s)))]
    [else (stream-filter predicate (stream-cdr s))]))
#+end_src

#+begin_src racket :exports code :tangle ./src/modules/stream-base.rkt :comments yes
;; procedure that will generate a stream of a range of value, with the range
;; being [start, end]
(define (stream-enumerate-interval start end)
  (if (> start end)
      the-empty-stream
      (cons-stream
       start
       (stream-enumerate-interval (+ start 1) end))))
#+end_src
