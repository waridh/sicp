#+title: Stream Base
* Overview

This org file contains the basic implementation of the stream interface, as the ~sicp~ language on Racket does not provide the higher level implementations.
* Module base

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
#lang sicp
#+end_src

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(#%provide stream-car stream-cdr display-stream)
#+end_src
* Stream basic selectors

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(define (stream-car s)
  (car s))

(define (stream-cdr s)
  (force (cdr s)))
#+end_src
* Stream Utilities

#+begin_src racket :tangle ./src/modules/stream-base.rkt :comments yes
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin
        (proc (stream-car s))
        (stream-for-each proc (stream-cdr s)))))
;; procedure that displays all the elements of a stream
(define (display-stream s)
  (display "(")
  (stream-for-each display-ele s)
  (display ")"))
(define (display-line x)
  (newline)
  (display x))
(define (display-ele x)
  (display " ")
  (display x))
#+end_src
