#+title: Exercise 50
* Prompt
Complete the following definition, which generalizes ~stream-map~ to allow procedures that take multiple arguments, analogous to ~map~ in the previous chapter.
#+begin_src racket :exports code
(define (stream-map proc . argstreams)
  (if (<??> (car argstreams))
      the-empty-stream
      (<??>
       (apply proc (map <??> argstreams))
       (apply stream-map
              (cons proc (map <??> argstreams))))))
#+end_src
* Solution
The procedure interface that we are looking to use is one where the input procedure takes in ~n~ positional parameters, and we will provide ~n~ sequences that will be mapped element by element.

We are most definitely setting up some test benches for this first.
** Test Bench
:properties:
:header-args:racket: :tangle ./src/exercise-50.rkt :comments yes
:end:

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/assert-tool.rkt")
#+end_src

#+begin_src racket :exports code
;; produce a stream of the range [start, end]
(define (generate-range start end)
  (if (> start end)
      the-empty-stream
      (cons-stream start (generate-range (+ start 1) end))))

;; produce a stream of a constant value with the specified size.
(define (generate-const value size)
  (define (maker curr)
    (if (>= curr size)
        the-empty-stream
        (cons-stream value (maker (+ curr 1)))))
  (maker 0))
#+end_src

The following is the test site.
#+begin_src racket :exports code
(assert-list-stream (list 0 2 4 6 8 10) (stream-map * (generate-range 0 5) (generate-const 2 6)))
#+end_src
** Implementation

Implementation has been moved to [[file:stream-base.org::*Stream Map][Stream Map]].


** Test Execution

#+begin_src bash :exports both :results output
racket ./src/exercise-50.rkt
#+end_src

#+RESULTS:
:
: pass: (0 2 4 6 8 10) == ( 0 2 4 6 8 10)
