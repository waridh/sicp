#+title: Exercise 22
* Prompt
Instead of representing a queue as a pair of pointers, we can build a queue as a procedure with local state. The local state will consist of pointers to the beginning and the end of an ordinary list. Thus, the ~make-queue~ procedure will have the form

#+begin_src racket :exports code
(define (make-queue)
(let ((front-ptr . . . )
      (rear-ptr . . . ))
  ⟨definitions of internal procedures⟩
  (define (dispatch m) . . .)
  dispatch))
#+end_src

Complete the definition of make-queue and provide implementations of the queue operations using this representation.

* Solution
:PROPERTIES:
:header-args:racket: :tangle ./src/exercise-22.rkt
:END:

#+begin_src racket :exports none
#lang sicp
#+end_src

We can bring the selectors and mutators into the local scope of the returned procedure. As with other message passing implementation in sicp, we are going to return a dispatch closure that takes in symbols and returns the corresponding data.

After this, we change the implementation of the global scope procedure, so that it is passing messages to the queue object.

#+begin_src racket :exports code
(define (make-queue)
  (let ([front-ptr '()]
        [rear-ptr '()])
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" front-ptr)
          (car front-ptr)))
    (define (insert-queue! item)
      (let ([new-pair (cons item '())])
        (cond
          [(empty-queue?)
           (set-front-ptr! new-pair)
           (set-rear-ptr! new-pair)]
          [else
           (set-cdr! rear-ptr new-pair)
           (set-rear-ptr! new-pair)])))
    (define (delete-queue!)
      (cond
        [(empty-queue?) (error "DELETE! called with an empty queue")]
        [else (set-front-ptr! (cdr front-ptr))]))
    (define (dispatch m)
      (cond
        [(eq? m 'front-ptr) front-ptr]
        [(eq? m 'rear-ptr) rear-ptr]
        [(eq? m 'empty-queue?) (empty-queue?)]
        [(eq? m 'front-queue) (front-queue)]
        [(eq? m 'insert-queue!) insert-queue!]
        [(eq? m 'delete-queue!) (delete-queue!)]
        [else (error "DISPATCH called with invalid symbol" m)]))
    dispatch))
(define (front-ptr queue)
  (queue 'front-ptr))
(define (rear-ptr queue)
  (queue 'rear-ptr))
(define (empty-queue? queue)
  (queue 'empty-queue?))
(define (front-queue queue)
  (queue 'front-queue))
(define (insert-queue! queue item)
  ((queue 'insert-queue!) item)
  queue)
(define (delete-queue! queue)
  (queue 'delete-queue!)
  queue)
(define (print-queue queue)
  (display (front-ptr queue))
  (newline))
#+end_src

Now, testing this against the testcase from the previous exercise, we see the same values, and therefore we were successful in implementing the closure representation of the queue.

#+begin_src racket :exports code
(define q1 (make-queue))
(print-queue (insert-queue! q1 'a))
(print-queue (insert-queue! q1 'b))
(print-queue (delete-queue! q1))
(print-queue (delete-queue! q1))
#+end_src

#+begin_src bash :exports results :results drawer
racket ./src/exercise-22.rkt
#+end_src

#+RESULTS:
:results:
(a)
(a b)
(b)
()
:end:

And now, we are correctly displaying the queue.
