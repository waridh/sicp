#+title: Exercise 1
* Prompt
An /accumulator/ is a procedure that is called repeatedly with a single numeric argument and accumulates its arguments into a sum. Each time it is called, it returns the currently accumulated sum. Write a procedure ~make-accumulator~ that generates accumulators, each maintaining an independent sum. The input to ~make-accumulator~ should specify the initial value of the sum; for example

#+begin_example
(define A (make-accumulator 5))
(A 10)
15
(A 10)
25
#+end_example
* Solution

We are not only doing the exercise, but starting a new organization of the code. We are now using org tangle to export our code, and using a shell command to run our process.

#+begin_src racket :exports code :tangle ./src/exercise-1.rkt :mkdirp yes :comments both
#lang sicp

(define (make-accumulator val)
  (lambda (x) (begin (set! val (+ val x)) val)))
#+end_src

#+begin_src racket :exports code :tangle ./src/exercise-1.rkt :mkdirp yes :comments both
(define A (make-accumulator 5))
(A 10)
(A 10)
#+end_src

#+begin_src sh :exports both
racket ./src/exercise-1.rkt
#+end_src

#+RESULTS:
| 15 |
| 25 |

Yep, this is what we expected.
