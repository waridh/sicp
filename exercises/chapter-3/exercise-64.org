#+title: Exercise 64
* Prompt
Write a procedure ~stream-limit~ that takes as arguments a stream and a number (the tolerance). It should examine the stream until it find two successive elements that differ in absolute value by less than the  tolerance, and return the second of the two elements. fusing this, we could compute square roots up to a given tolerance by

#+begin_src racket :exports code
(define (sqrt x tolerance)
  (stream-limit (sqrt-stream x) tolerance))
#+end_src
* Solution
:properties:
:header-args:racket: :tangle ./src/exercise-64.rkt :comments yes
:end:
We are writing a sort of a selector for the stream.

#+begin_src racket :exports none
#lang sicp
(#%require "modules/stream-base.rkt"
           "modules/assert-tool.rkt"
           "modules/stream-series.rkt"
           "modules/stream-iterator.rkt")
#+end_src

The implementation of this problem may be found [[file:stream-iterator.org][here]].

** Testing
#+begin_src racket :exports code
(assert (< (- (stream-limit (accelerated-sequence euler-transform pi-stream) 1) 3.166) 0.01)
        "testing basic difference")
(assert (> (- (stream-limit (accelerated-sequence euler-transform pi-stream) 1) 3.166) 0.0000000001)
        "testing that we are not over calculating")
(assert (< (- (stream-limit (accelerated-sequence euler-transform pi-stream) 0.0000000000001) 3.14159265358979) 0.00000000000001)
        "testing more difficult difference")
#+end_src
** Results

#+begin_src bash :exports both :results output
racket ./src/exercise-64.rkt
#+end_src

#+RESULTS:
:
: pass: testing basic difference
: pass: testing that we are not over calculating
: pass: testing more difficult difference
