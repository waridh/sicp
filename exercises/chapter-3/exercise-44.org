#+title: Exercise 44
* Prompt
Consider the problem of transferring an amount from one account to another. Ben Bitdiddle claims that this can be accomplished with the following procedure, even if there are multiple people concurrently transferring money among multiple accounts, using any account mechanism that serializes deposit and withdrawal transactions, for example, the version of ~make-account~ in the text above.

#+begin_src racket
(define (transfer from-account to-account amount)
  ((from-account 'withdraw) amount)
  ((to-account 'deposit) amount))
#+end_src

Louis Reasoner claims that there is a problem here, and that we need to use a more sophisticated method, such as the one required for dealing with the exchange problem. Is Louis right? If not, what is the essential difference between the transfer problem and the exchange problem? (You should assume that the balance in ~from-account~ is at least amount.)
* Solution
Louis Reasoner is not correct, since this implementation will correctly transfer the amount without leaving the system in an inconsistent state. The essential difference here is that ~transfer~ has no unguarded access to the accounts, and it does not rely on un-serialized computation that depends on value that could change during such a computation. This prevents other processes from interleaving with this one, and mutating shared states.
