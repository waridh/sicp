#+title: Exercise 32
* Prompt

The procedure to be run during each time segment of the agenda are kept in a queue. Thus, the procedures for each segment are called in the order in which they were added to the agenda (FIFO). Explain why this order must be used. In particular, trace the behavior of an ~and-gate~ whose inputs change from 0, 1 to 1, 0 in the same segment and say how the behavior would differ if we stored a segment's procedures in an ordinary list, adding and removing procedures only at the front (last in, first out/stack).

* Solution

The use of a fifo to store the actions in a single time segment might be done to somewhat preserve granular time actions. Our simulation is not perfect, since we do not have infinite compute, there are cases where even though events happen at different times, the end up on the same time segments. Using the heuristic that the first event to occur in our serial program will be the first action that should execute, gives us a stable rule.

In the example where the input changes from 0, 1 to 1, 0, if we are working with a fifo, the output of the ~and-gate~ will, in the same time segment, spike to 1, and then immediately be brought down to 0.

On a lifo architecture for the function holder, we are going to see that the output signal for the ~and-gate~ would stay at 0, without spiking. Technically, both behaviors are fine, we just want our system to be consistent.
