#+title: Chapter 1 Exercises
* Exercise 1.2
#+begin_src racket :exports both
#lang sicp

; Exercise 1.2
( /
  ( + 5 4 ( - 2 ( - 3 ( + 6 ( / 4 5)))))
  ( * 3 ( - 6 2) ( - 2 7)))
#+end_src

#+RESULTS:
: -37/150
* Exercise 1.3
#+begin_src racket :exports both
#lang sicp
; Planning:
; If less than or equal to, we will cover the case where they are all equal,
; and the case where there are two smallest
(define (sum-of-square x y) (+ (* x x) (* y y)))
(define (<= x y) (or (< x y) (= x y)))
(define (less-than-others a b c) (and ( <= a b) ( <= a c)))
(define (exercise-1-3 x y z)
  (cond ((less-than-others x y z) (sum-of-square y z))
        ((less-than-others y x z) (sum-of-square x z))
        ((less-than-others z x y) (sum-of-square x y))
        ))

(= (exercise-1-3 1 2 3) 13)
(= (exercise-1-3 3 2 1) 13)
(= (exercise-1-3 3 1 2) 13)
(= (exercise-1-3 2 3 1) 13)
(= (exercise-1-3 3 2 2) 13)
(= (exercise-1-3 2 2 2) 8)
#+end_src

#+RESULTS:
: #t
: #t
: #t
: #t
: #t
: #t
* Exercise 1.4
If b is greater than 0, add a and b, else subtract a and b
* Exercise 1.6
Using the re-implementation of the if special method will cause the operator to be evaluated, increasing total evaluations to increase by around 25%.

* Exercise 1.7

#+begin_src racket :exports both
#lang sicp

(define
  (average x y)
  (/ (+ x y) 2))

(define (abs x) (if (< x 0) (- x) x))

;; Returns a guess that is closer to the sqrt of the value
(define (improve guess value)
  (average guess (/ value guess)))

;; Predicate that returns true if the guess was close enough to the sqrt of
;; the value
(define (close-enough? guess value)
  (< (abs (- value (* guess guess))) 0.001))

(define (sqrt-iter guess value)
  (if (close-enough? guess value)
      guess
      (sqrt-iter (improve guess value) value)))

;; This is the user interface for the function
(define (sqrt value) (sqrt-iter 1.0 value))

(sqrt 9)

;; Here is the edge case that would break the previous version
;; This should be 0.01, but it will evaluate to around 0.03
(sqrt 0.0001)

;; With this many zeros, the line below actually just does not evaluate
;; (sqrt 1000000000000000)

(define (new-close-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.001))

(define (new-sqrt-iter guess prev-guess value)
  (if (new-close-enough? guess prev-guess)
      guess
      (new-sqrt-iter (improve guess value) guess value)))

(define (new-sqrt value) (new-sqrt-iter 1.0 0 value))

;; The following calls will return the correct values
(new-sqrt 9)
(new-sqrt 0.0001)
(new-sqrt 1000000000000000)

;; This is the test for very large and very small values
(new-sqrt 0.00000000000001)
(new-sqrt 10000000000000000000000000)

;; Conclusion from running this procedure on a very small and a very large
;; value is that the new method works better on very large values
#+end_src

#+RESULTS:
: 3.00009155413138
: 0.03230844833048122
: 3.000000001396984
: 0.010000714038711746
: 31622776.601683795
: 0.00097656250341333
: 3162277660168.3794
* Exercise 1.8
** Problem statement
Create a procedure for cube root using the Newton method
** Implementation
#+begin_src racket :exports both
#lang sicp

(define (abs x) (if (< x 0) (- x) x))
(define (square x) (* x x))

;; Returns a guess that is closer to the sqrt of the value
(define (improve guess value)
  (/ (+ (/ value (square guess)) (* 2 guess)) 3))

(define (new-close-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.001))

(define (cube-root-iter guess prev-guess value)
  (if (new-close-enough? guess prev-guess)
      guess
      (cube-root-iter (improve guess value) guess value)))

(define (cube-root value) (cube-root-iter 1.0 0 value))

(cube-root 27)
#+end_src

#+RESULTS:
: 3.0000000000000977
* Exercise 1.9
** Program 1
#+begin_src racket :exports both
#lang sicp
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc  5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+end_src

#+RESULTS:
#+begin_example
9
9
9
9
9
9
9
9
9
9
#+end_example
- In this version of the program, we can see that the previous "call stack" is waiting for the result of the next step of the process, therefore, this is as recursive process.
** Program 2
#+begin_src racket :exports both
#lang sicp
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
#+end_src

#+RESULTS:
: 9
: 9
: 9
: 9
: 9
: 9

- In this version of the program, all the relevant states are passed into the next iteration of the process, therefore, this a iterative process
* Exercise 1.10
We are working with Ackermann's function, which has the following form
#+begin_src racket :exports both
#lang sicp
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))
#+end_src
** Finding the values for the expressions
We are not going to evaluate this procedure yet. Let's answer some questions first.

~(A 1 10)~ will do the following.
#+begin_src racket :exports code
(A 1 10)
(A 0 (A 1 9))
(A 0 (A 0 (A 1 8)))
;; Expansion as we reduce the value of y
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
;; Expansion is now done, it can reduce down by multiplying by 2
1024
;; When x is 1, the function acts like 2 to the power of y
#+end_src
When ~x~ is 1, we see that the function is \(2^{y}\)

~(A 2 4)~ will do the following
#+begin_src racket :exports code
(A 2 4)
(A 1 (A 2 3))
;; Expansion as we reduce the value of y
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 4))
;; (A 1 4) is 2 to the power of 4
(A 1 16)
;; Expansion is now done,
65536
#+end_src

When ~x~ is 2, we see that the function is 2 pow 2 (y - 1) times

~(A 3 3)~ will do the following
#+begin_src racket :exports code
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
;; Now we already know what is function is when x is 2, so we can just solve mathematically
(A 2 4)
;; This is a similar value
65536
#+end_src
** Mathematical definition
#+begin_src racket :exports code
(define (f n) (A 0 n))
#+end_src

\[f \left( n \right) = 2 \times n\]

#+begin_src racket :exports code
(define (g n) (A 1 n))
#+end_src

\[g \left( n \right) = 2 ^{n} \]

#+begin_src racket :exports code
(define (h n) (A 2 n))
#+end_src

\[h \left( n \right) = {^{n}2} \]

Looks like this is a concept for [[https://en.wikipedia.org/wiki/Tetration][tetration]]
* Exercise 1.11
** Definition
\[f \left( n \right) = \begin{cases} n ~ \text{if} ~ n < 3 \\ f \left( n - 1 \right) + 2 f \left( n -2  \right) + 3 f \left( n - 3 \right) ~ \text{if} ~ n \geq 3 \end{cases}
\]
** Recursive process
#+begin_src racket
#lang sicp
(define (f n) (if (< n 3) n
                     (+ (f (- n 1))
                        (* 2 (f (- n 2)))
                        (* 3 (f (- n 3))))))
(f 0)
(f 1)
(f 2)
(f 3)
(f 4)
(f 5)
(f 6)
(f 7)
(f 8)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 4
: 11
: 25
: 59
: 142
: 335
** Iterative process
#+begin_src racket
#lang sicp
(define (f n)
  (define (f-aux f-1-aux f-2-aux f-3-aux) (+ f-1-aux (* 2 f-2-aux) (* 3 f-3-aux)))
  (define (f-iter cnt f-1 f-2 f-3)
    (if (= n cnt)
        (f-aux f-1 f-2 f-3)
        (f-iter (inc cnt) (f-aux f-1 f-2 f-3) f-1 f-2)))
  (if (< n 3) n (f-iter 3 2 1 0)))
(f 0)
(f 1)
(f 2)
(f 3)
(f 4)
(f 5)
(f 6)
(f 7)
(f 8)
(f 100)
#+end_src

#+RESULTS:
#+begin_example
0
1
2
4
11
25
59
142
335
11937765839880230562825561449279733086
#+end_example
